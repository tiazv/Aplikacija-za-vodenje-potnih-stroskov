# Ime pipeline-a za backend
name: Backend CI

# Dogodki, ki sprožijo workflow (push in pull request na glavno vejo)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job za gradnjo backenda
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-
      # ⚠️ Caching:
      # - Če cache obstaja (cache hit), se node_modules obnovi, preden se zažene npm install.
      # - Če cache ne obstaja (cache miss), npm install ponovno ustvari mapo node_modules.

    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm ci

    - name: Upload backend artifacts  # Naložitev artefaktov za backend
      uses: actions/upload-artifact@v4
      with:
        name: backend-build  # Ime artefakta
        path: |
          backend/  
          backend/node_modules/  
        # Pot do celotne kode
        # Nameščene odvisnosti

  # Ime job-a za testiranje backenda
  test-backend:
    needs: build-backend  # Odvisnost od job-a build-backend
    runs-on: ubuntu-latest  # Okolje, v katerem bo job tekel

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 16
    
    - name: Cache node_modules  # Caching odvisnosti
      uses: actions/cache@v3
      with:
        path: backend/node_modules  # Pot do mape node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('/backend/package-lock.json') }}  # Ključ za cache
        restore-keys: |
          ${{ runner.os }}-backend-
      
    - name: Install dependencies  # Namestitev odvisnosti
      run: |
        cd backend
        npm install

    - name: Run tests with coverage  # Izvajanje testov s pokritostjo
      run: |
        cd backend
        npm run test:ci

    - name: Upload coverage report  # Naložitev poročila o pokritosti
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/coverage/

  # Gradnja Docker slike za backend
  dockerize-and-push-backend:
    needs: test-backend
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest ./backend
        docker tag ${{ secrets.DOCKER_USERNAME }}/backend:latest ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.sha }}        

  # Deploy backend to Firebase Functions
  deploy-backend-to-firebase:
    needs: test-backend  # This depends on the test stage for your backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Firebase CLI
        run: |
          cd backend  # Navigate to the backend folder
          npm install -g firebase-tools

      - name: Install dependencies for backend
        run: |
          cd backend
          npm install

      - name: Deploy to Firebase Functions
        run: |
          cd backend
          firebase deploy --only functions --token ${{ secrets.FIREBASE_TOKEN }}
